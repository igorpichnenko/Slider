!function(e){var t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=14)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var n=function(){function e(){this.events={}}return e.prototype.subscribe=function(e,t){!this.events[e]&&(this.events[e]=[]),this.events[e].push(t)},e.prototype.unsubscribe=function(e,t){this.events[e]=this.events[e].filter((function(e){return t!==e}))},e.prototype.emit=function(e,t){var s=this.events[e];s&&s.forEach((function(e){return e.call(null,t)}))},e}();t.EventEmitter=n},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.standardOptions=void 0;var n={orientation:"horizontal",type:"double",min:0,max:10,step:1,from:3,to:7,postfix:"₽",isPostfix:!0,isLabel:!0,isScale:!0,color:"orange",isScalePostfix:!0,scalePostfix:"₽",minMax:!1,fromTo:!1,isTrackPostfix:!0,trackPostfix:"₽",isColor:!0,changeColor:!0,isChangeColor:!0,isGradient:!0,gradient:"purple",gradientDeg:45,isColorOut:!1,onlyDivisions:!1,separate:"",allColors:s(11).allColors};t.standardOptions=n},function(e,t,s){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},o=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),a=[];function r(e){for(var t=-1,s=0;s<a.length;s++)if(a[s].identifier===e){t=s;break}return t}function l(e,t){for(var s={},n=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],c=s[l]||0,u="".concat(l," ").concat(c);s[l]=c+1;var d=r(u),f={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:b(f,t),references:1}),n.push(u)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=s.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,s,n){var i=s?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,s){var n=s.css,i=s.media,o=s.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,m=0;function b(e,t){var s,n,i;if(t.singleton){var o=m++;s=h||(h=c(t)),n=f.bind(null,s,o,!1),i=f.bind(null,s,o,!0)}else s=c(t),n=p.bind(null,s,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var s=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<s.length;n++){var i=r(s[n]);a[i].references--}for(var o=l(e,t),c=0;c<s.length;c++){var u=r(s[c]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}s=o}}}},function(e,t,s){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=s(4),o=s(1);s(12),function(e){e.fn.colorSlider=function(t,s){var a={init:function(t,s){var a=e.extend({},o.standardOptions,s);return t.data("presenter",new i.Presenter(a,t)),t.data("options",n(n({},a),t.data("presenter").getOptions())),t},change:function(e,t){return void 0===t?e.data("presenter"):(e.data("presenter").setOptions(t),e.data("presenter").upDataView(),this)},getValue:function(e,t){return e.data("presenter").emitter.subscribe("newData",t),void 0===t||e.data("presenter").emitter.subscribe("newData",t),this}};return"string"==typeof t&&"change"===t?a[t].call(this,this,arguments[1]):("string"==typeof t&&"getValue"===t&&a[t].call(this,this,arguments[1]),"object"!=typeof t&&t?void 0:a.init(this,t))}}(jQuery)},function(e,t,s){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Presenter=void 0;var i=s(5),o=s(6),a=s(0),r=s(1),l=function(){function e(e,t){this.element=t,this.emitter=new a.EventEmitter,this.model=this.createModel(e),this.view=this.createView(this.model.state,t),this.bindSubscribe()}return e.prototype.upDataView=function(){this.view.upDataSlider()},e.prototype.setOptions=function(e){var t=n(n({},r.standardOptions),e);this.model.setData(t)},e.prototype.getOptions=function(){return this.model.state},e.prototype.createModel=function(e){return new i.Model(e)},e.prototype.createView=function(e,t){return new o.View(e,t)},e.prototype.bindSubscribe=function(){this.getNewData=this.getNewData.bind(this),this.sendNewPosition=this.sendNewPosition.bind(this),this.addSubscribtions()},e.prototype.addSubscribtions=function(){this.model.emitter.subscribe("newData",this.getNewData),this.view.emitter.subscribe("newPosition",this.sendNewPosition)},e.prototype.getNewData=function(e){this.view.upData(e),this.emitter.emit("newData",e)},e.prototype.sendNewPosition=function(e){var t=this.model.state,s=n(n({},t),e);this.model.setData(s)},e}();t.Presenter=l},function(e,t,s){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Model=void 0;var i=s(0),o=function(){function e(e){this.emitter=new i.EventEmitter,this.state=this.init(e)}return e.prototype.setData=function(e){var t=this.validateFromTo(e),s=this.validateMinMaxStep(e);this.state=n(n(n({},e),t),s),this.emitter.emit("newData",this.state)},e.prototype.init=function(e){return this.setData(e),this.state},e.prototype.validateMinMaxStep=function(e){var t=e.min,s=e.max,n=e.step;n<1&&(e.step=1);var i=Math.abs(s)/2;return n>i&&(e.step=i),s<=t&&s<0&&(e.min=t-n),t>=s&&s>0&&(e.min=t,e.max=t+n),s<0&&s<t&&(e.max=t+n,e.min=t),e},e.prototype.validateFromTo=function(e){var t=e.from,s=e.to,n=e.max,i=e.min,o=e.type,a=e.step;return"single"===o&&(e.to=n),i>t&&(e.from=i),s>n&&(e.to=n),n<0&&0===i&&(e.from=i,e.to=i),"double"===o&&t>=s&&(e.from=s-a),s<=i&&(e.to=i+a,e.from=i),t>0&&i<0&&n<0&&(e.from=i),n<i&&(e.to=i+a),e},e}();t.Model=o},function(e,t,s){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var i=s(0),o=s(7),a=s(8),r=s(9),l=s(10),c=function(){function e(e,t){this.emitter=new i.EventEmitter,this.element=t,this.slider=this.createSlider(e,t),this.state=this.init(e),this.rollers=this.createRollers(this.state),this.bar=this.createBar(this.state),this.track=this.createTrack(this.state),this.scale=this.createScale(this.state),this.upData(this.state),this.bindEventListeners()}return e.prototype.init=function(e){var t=this.getSliderSize(e),s=this.getOneStep(e),i=this.slider;return n(n({},e),{size:t,oneStep:s,slider:i})},e.prototype.createSlider=function(e,t){var s=e.orientation,n=document.createElement("div");return n.className="slider slider_"+s,t.append(n),n},e.prototype.createTrack=function(e){return new a.Track(e)},e.prototype.createBar=function(e){return new l.Bar(e)},e.prototype.createRollers=function(e){return new o.Rollers(e)},e.prototype.createScale=function(e){return new r.Scale(e)},e.prototype.upData=function(e){var t=n(n({},this.state),e);this.rollers.upData(t),this.bar.upData(t),this.scale.upData(t),this.track.upData(t),this.state=n({},t)},e.prototype.upDataSlider=function(){this.slider.remove(),this.slider=this.createSlider(this.state,this.element),this.state=this.init(this.state),this.rollers=this.createRollers(this.state),this.scale=this.createScale(this.state),this.track=this.createTrack(this.state),this.bar=this.createBar(this.state),this.upData(this.state),this.bindEventListeners()},e.prototype.getOneStep=function(e){var t=e.min,s=e.max,n=e.step,i=Math.ceil((s-t)/n);return this.getSliderSize(e)/i},e.prototype.bindEventListeners=function(){this.onTrackClick=this.onTrackClick.bind(this),this.onScaleClick=this.onScaleClick.bind(this),this.addEventListeners()},e.prototype.addEventListeners=function(){var e=this.dragStart.bind(this);this.slider.addEventListener("touchstart",e),this.slider.addEventListener("mousedown",e),this.slider.addEventListener("click",this.onTrackClick),this.slider.addEventListener("scaleclick",this.onScaleClick)},e.prototype.dragStart=function(e){var t=e.target;if(this.getTargetType(t)){var s=this.drag.bind(this,t),n=function(){document.removeEventListener("mousemove",s),t.removeEventListener("touchmove",s),document.removeEventListener("mouseup",n),t.removeEventListener("touchend",n)};document.addEventListener("mousemove",s),t.addEventListener("touchmove",s),document.addEventListener("mouseup",n),t.addEventListener("touchend",n)}},e.prototype.drag=function(e,t){var s=this.state.orientation,n=0;t.preventDefault(),/roller/.test(e.className)&&(n="horizontal"===s?"touchmove"===t.type?this.convertPxToValue(t.touches[0].clientX):this.convertPxToValue(t.clientX):"touchmove"===t.type?this.convertPxToValue(t.touches[0].clientY):this.convertPxToValue(t.clientY),this.updatePosition(n,e))},e.prototype.getTargetType=function(e){var t=this.slider.querySelectorAll(".slider__roller");return t[0]&&t[0].contains(e)?"from":t[1].contains(e)?"to":"undefined"},e.prototype.onScaleClick=function(e){var t=e.detail.value;this.updatePosition(t)},e.prototype.onTrackClick=function(e){var t=this.state.orientation,s=e.target,n=0;if(!/scale/.test(s.className)){n="horizontal"===t?e.clientX:e.clientY;var i=this.convertPxToValue(n);this.updatePosition(i)}},e.prototype.updatePosition=function(e,t){var s=this.state,n=s.from,i=s.to,o=s.type,a=s.step;this.convertValueToColor(e);var r=Math.abs(n-e),l=Math.abs(i-e);"single"===o&&r?this.emitter.emit("newPosition",{from:e}):t?"from"===this.getTargetType(t)?(e>i-a&&(e=n),this.emitter.emit("newPosition",{from:e})):(e<n+a&&(e=i),this.emitter.emit("newPosition",{to:e})):"from"===(r<l?"from":"to")?this.emitter.emit("newPosition",{from:e}):this.emitter.emit("newPosition",{to:e})},e.prototype.convertPxToValue=function(e){var t=this.state,s=t.min,n=t.max,i=t.step,o=t.oneStep,a=t.size,r=t.orientation,l=this.getSliderPosition(),c=0;return(c="horizontal"===r?e-l:l+a-e)>a?n:c<0?s:Math.round(c/o)*i+s},e.prototype.convertValueToColor=function(e){var t=this.state,s=t.color,n=t.gradient,i=this.state,o=i.max,a=i.isColor,r=i.changeColor,l=e/o;if(!0===a){var c=0,u=0;!1===r?(c=Math.round(255*l*255*255),u=Math.round(255*l*254*254)):(c=Math.round(256*l*256*255),u=Math.round(254*l*254*254));var d=Math.abs(u);s="#"+Math.abs(c).toString(16),n="#"+d.toString(16),this.emitter.emit("newPosition",{color:s}),this.emitter.emit("newPosition",{gradient:n})}},e.prototype.getSliderPosition=function(){var e=this.state,t=e.orientation,s=e.slider;return"horizontal"===t?s.getBoundingClientRect().left:s.getBoundingClientRect().top},e.prototype.getSliderSize=function(e){return"horizontal"===e.orientation?this.slider.getBoundingClientRect().width:this.slider.getBoundingClientRect().height},e}();t.View=c},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rollers=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,s=e.orientation,n=document.createElement("div");n.className="slider__roller slider__roller_first slider__roller_"+s;var i=document.createElement("div");i.className="slider__roller_second\n      slider__roller\n      slider__roller_"+s,t.append(n),t.append(i),this.createTooltip(n,i,e),this.moveRollersAtValue(e,n,i),this.toggleRollers(e,i),this.updataColor(e,n,i)},e.prototype.createTooltip=function(e,t,s){var n=s.orientation,i=document.createElement("div");i.className="slider__tooltip_first slider__tooltip slider__tooltip_"+n;var o=document.createElement("div");o.className="slider__tooltip_second slider__tooltip slider__tooltip_"+n,e.append(i),t.append(o),this.updataOutTooltip(i,o,s)},e.prototype.updataOutTooltip=function(e,t,s){var n=s.to,i=s.from,o=s.postfix,a=s.isPostfix;!0===s.isLabel&&(!0===a&&(e.innerHTML=""+this.separate(i,s)+o,t.innerHTML=""+this.separate(n,s)+o),!1===a&&(e.innerHTML=this.separate(i,s),t.innerHTML=this.separate(n,s))),this.setColor(e,t,s)},e.prototype.separate=function(e,t){var s=t.separate;return String(e).replace(/\B(?=(\d{3})+(?!\d))/g,""+s)},e.prototype.setColor=function(e,t,s){var n=s.color,i=s.gradient,o=s.isColorOut,a=s.allColors,r=s.isChangeColor,l=s.isLabel,c=a[n],u=a[i];void 0===u&&(u=i),void 0===c&&(c=n),!0===r&&!0===o&&(e.innerHTML=String(c),t.innerHTML=String(u),e.style.backgroundColor=""+n,t.style.backgroundColor=""+i,e.classList.add("slider__tooltip_bg"),t.classList.add("slider__tooltip_bg")),!1===l&&(e.classList.add("slider__tooltip_display-none"),t.classList.add("slider__tooltip_display-none"))},e.prototype.updataColor=function(e,t,s){var n=e.color,i=e.isGradient,o=e.gradient,a=e.isChangeColor,r=e.gradientDeg;!0===a&&(!0===i?(t.style.background="linear-gradient("+r+"deg, "+n+", "+o+")",s.style.background="linear-gradient("+r+"deg, "+n+", "+o+")"):(t.style.background=n,s.style.background=n))},e.prototype.moveRollersAtValue=function(e,t,s){var n=e.to,i=e.from,o=e.orientation,a=this.convertValueToPx(n,e),r=this.convertValueToPx(i,e),l=this.convertPxToProcent(a,e),c=this.convertPxToProcent(r,e);"horizontal"===o?(t.style.left=c+"%",s.style.left=l+"%"):(t.style.bottom=c+"%",s.style.bottom=l+"%")},e.prototype.upData=function(e){var t=e.slider,s=t.querySelector(".slider__roller_first"),n=t.querySelector(".slider__roller_second"),i=t.querySelector(".slider__tooltip_first"),o=t.querySelector(".slider__tooltip_second");this.moveRollersAtValue(e,s,n),this.toggleRollers(e,n),this.updataColor(e,s,n),this.updataOutTooltip(i,o,e)},e.prototype.convertValueToPx=function(e,t){var s=t.min,n=t.max,i=t.step,o=t.size,a=t.oneStep;return e===n?o:Math.round((e-s)/i)*a},e.prototype.convertPxToProcent=function(e,t){return 100*e/t.size},e.prototype.toggleRollers=function(e,t){var s=e.type;t.style.display="single"===s?"none":"block"},e}();t.Rollers=n},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Track=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,s=e.orientation,n=document.createElement("div");n.className="slider__track slider__track_"+s,t.append(n),this.createOutElement(n,e)},e.prototype.createOutElement=function(e,t){var s=t.orientation,n=document.createElement("div"),i=document.createElement("div");n.className="slider__out slider__out-start slider__out-start_"+s,i.className="slider__out slider__out-end slider__out-end_"+s,e.append(n),e.append(i),this.setStartEndTrackOut(n,i,t)},e.prototype.setStartEndTrackOut=function(e,t,s){var n=s.min,i=s.max,o=s.from,a=s.to,r=s.minMax,l=s.fromTo,c=s.isTrackPostfix,u=s.trackPostfix;!1===c&&(u=""),!0===r&&(e.innerHTML=""+this.separate(n,s)+u,t.innerHTML=""+this.separate(i,s)+u),!0===l&&(e.innerHTML=""+this.separate(o,s)+u,t.innerHTML=""+this.separate(a,s)+u)},e.prototype.separate=function(e,t){var s=t.separate;return String(e).replace(/\B(?=(\d{3})+(?!\d))/g,""+s)},e.prototype.upData=function(e){var t=e.slider,s=t.querySelector(".slider__out-start"),n=t.querySelector(".slider__out-end");this.setStartEndTrackOut(s,n,e)},e}();t.Track=n},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Scale=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,s=e.orientation,n=document.createElement("div");n.className="slider__scale slider__scale_"+s,t.append(n),this.addEventListeners(n),this.addScaleMarker(e,n),this.checkScale(e,n)},e.prototype.upData=function(e){var t=e.slider.querySelector(".slider__scale");this.checkScale(e,t),this.updataScaleMarker(e)},e.prototype.updataScaleMarker=function(e){var t=e.scalePostfix,s=e.isScalePostfix,n=e.onlyDivisions,i=e.slider,o=e.color;i.querySelectorAll(".slider__scale-value").forEach((function(e){!0===s?e.setAttribute("data-text",""+t):e.setAttribute("data-text",""),!0===n?(e.setAttribute("data-text",""),e.classList.add("slider__scale-value_fs-0")):e.classList.add("slider__scale-value_fs-normal")})),document.documentElement.style.setProperty("--scale-color"," "+o)},e.prototype.checkScale=function(e,t){var s=e.isScale;!1===s&&(t.style.display="none"),!0===s&&(t.style.display="")},e.prototype.addEventListeners=function(e){this.onScaleClick=this.onScaleClick.bind(this),e.addEventListener("click",this.onScaleClick)},e.prototype.addScaleMarker=function(e,t){for(var s=e.min,n=e.max,i=e.step,o=e.size,a=e.oneStep,r=this.getIncrement(e),l=r/i*a,c=document.createDocumentFragment(),u=0,d=s;d<n&&!(u>o-50);d+=r)this.createScaleMarker(c,d,u,e),u+=l;this.createScaleMarker(c,n,o,e),t.append(c)},e.prototype.getIncrement=function(e){var t=e.size,s=e.oneStep,n=e.step,i=Math.ceil(t/s);return Math.ceil(i/5)*n},e.prototype.createScaleMarker=function(e,t,s,n){var i=n.orientation,o=document.createElement("span");o.className="slider__scale-value slider__scale-value_"+i,e.append(o),o.innerHTML=t.toString(),this.updataScaleMarker(n);var a=this.convertPxToPercent(s,n);"horizontal"===i?o.style.left=a+"%":o.style.bottom=a+"%"},e.prototype.convertPxToPercent=function(e,t){return 100*e/t.size},e.prototype.onScaleClick=function(e){var t=e.target;if(t instanceof HTMLElement&&t.classList.contains("slider__scale-value")){var s=Number(t.innerHTML),n=new CustomEvent("scaleclick",{bubbles:!0,detail:{event:e,value:s}});t.dispatchEvent(n)}},e}();t.Scale=n},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,s=e.orientation,n=document.createElement("div");n.className="slider__bar slider__bar_"+s,t.append(n),this.updataColor(e,n),this.updataBar(e,n)},e.prototype.upData=function(e){var t=e.slider.querySelector(".slider__bar");this.updataColor(e,t),this.updataBar(e,t)},e.prototype.updataColor=function(e,t){var s=e.color,n=e.isGradient,i=e.gradient,o=e.gradientDeg;!0===e.isChangeColor&&(t.style.background=!0===n?"linear-gradient("+o+"deg, "+s+", "+i+")":s)},e.prototype.getRollerPositions=function(e){var t=e.slider.querySelectorAll(".slider__roller");return[this.calculatePosition(t[0],e),this.calculatePosition(t[1],e)].sort((function(e,t){return e-t}))},e.prototype.calculatePosition=function(e,t){var s="horizontal"===t.orientation?"left":"top",n=Number.parseInt(getComputedStyle(e).width,10);return e.getBoundingClientRect()[s]+n/2},e.prototype.convertPxToProcent=function(e,t){return 100*e/t.size},e.prototype.updataBar=function(e,t){var s=e.type,n="horizontal"===e.orientation,i=n?"left":"top",o=n?"width":"height",a=this.getRollerPositions(e),r="single"===s,l=this.getNewSliderPos(e);if(r)if(n){var c=this.convertPxToProcent(Math.abs(a[1]-l),e);t.style[i]="0%",t.style[o]=c+"%"}else{c=100-(u=this.convertPxToProcent(Math.abs(a[1]-l),e));t.style[i]=u+"%",t.style[o]=c+"%"}else{var u=this.convertPxToProcent(Math.abs(a[0]-l),e);c=this.convertPxToProcent(Math.abs(a[1]-a[0]),e);t.style[i]=u+"%",t.style[o]=c+"%"}},e.prototype.getNewSliderPos=function(e){var t=e.orientation,s=e.slider;return"horizontal"===t?s.getBoundingClientRect().left:s.getBoundingClientRect().top},e}();t.Bar=n},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.allColors=void 0;t.allColors={"#f0f8ff":"aliceblue","#faebd7":"antiquewhite","#00ffff":"aqua","#7fffd4":"aquamarine","#f0ffff":"azure","#f5f5dc":"beige","#ffe4c4":"bisque","#000000":"black","#ffebcd":"blanchedalmond","#0000ff":"blue","#8a2be2":"blueviolet","#a52a2a":"brown","#deb887":"burlywood","#5f9ea0":"cadetblue","#7fff00":"chartreuse","#d2691e":"chocolate","#ff7f50":"coral","#6495ed":"cornflowerblue","#fff8dc":"cornsilk","#dc143c":"crimson","#00008b":"darkblue","#008b8b":"darkcyan","#b8860b":"darkgoldenrod","#a9a9a9":"darkgray","#006400":"darkgreen","#bdb76b":"darkkhaki","#8b008b":"darkmagenta","#556b2f":"darkolivegreen","#ff8c00":"darkorange","#9932cc":"darkorchid","#8b0000":"darkred","#e9967a":"darksalmon","#8fbc8f":"darkseagreen","#483d8b":"darkslateblue","#5ddfbe":"aquamarine","#198000":"Зеленый","#2f4f4f":"darkslategray","#00ced1":"darkturquoise","#9400d3":"darkviolet","#ff1493":"deeppink","#00bfff":"deepskyblue","#696969":"dimgray","#1e90ff":"dodgerblue","#b22222":"firebrick","#fffaf0":"floralwhite","#228b22":"forestgreen","#ff00ff":"fuchsia","#dcdcdc":"gainsboro","#f8f8ff":"ghostwhite","#daa520":"goldenrod","#ffd700":"gold","#808080":"gray","#008000":"Зеленый","#adff2f":"greenyellow","#f0fff0":"honeydew","#ff69b4":"hotpink","#cd5c5c":"indianred","#4b0082":"indigo","#fffff0":"ivory","#f0e68c":"khaki","#fff0f5":"lavenderblush","#e6e6fa":"lavender","#7cfc00":"lawngreen","#fffacd":"lemonchiffon","#add8e6":"lightblue","#f08080":"lightcoral","#e0ffff":"lightcyan","#fafad2":"lightgoldenrodyellow","#d3d3d3":"lightgray","#90ee90":"lightgreen","#ffb6c1":"lightpink","#ffa07a":"lightsalmon","#20b2aa":"lightseagreen","#87cefa":"lightskyblue","#778899":"lightslategray","#b0c4de":"lightsteelblue","#ffffe0":"lightyellow","#00ff00":"lime","#32cd32":"limegreen","#faf0e6":"linen","#800000":"maroon","#66cdaa":"mediumaquamarine","#0000cd":"mediumblue","#ba55d3":"mediumorchid","#9370db":"mediumpurple","#3cb371":"mediumseagreen","#7b68ee":"mediumslateblue","#00fa9a":"mediumspringgreen","#48d1cc":"mediumturquoise","#c71585":"mediumvioletred","#191970":"midnightblue","#f5fffa":"mintcream","#ffe4e1":"mistyrose","#ffe4b5":"moccasin","#ffdead":"navajowhite","#000080":"navy","#fdf5e6":"oldlace","#808000":"olive","#6b8e23":"olivedrab","#ffa500":"orange","#ff4500":"orangered","#da70d6":"orchid","#eee8aa":"palegoldenrod","#98fb98":"palegreen","#afeeee":"paleturquoise","#db7093":"palevioletred","#ffefd5":"papayawhip","#ffdab9":"peachpuff","#cd853f":"peru","#ffc0cb":"pink","#dda0dd":"plum","#b0e0e6":"powderblue","#800080":"purple","#663399":"rebeccapurple","#ff0000":"Красный","#bc8f8f":"rosybrown","#4169e1":"royalblue","#8b4513":"saddlebrown","#fa8072":"salmon","#f4a460":"sandybrown","#2e8b57":"seagreen","#fff5ee":"seashell","#a0522d":"sienna","#c0c0c0":"silver","#87ceeb":"skyblue","#6a5acd":"slateblue","#708090":"slategray","#fffafa":"snow","#00ff7f":"springgreen","#4682b4":"steelblue","#d2b48c":"tan","#008080":"teal","#d8bfd8":"thistle","#ff6347":"tomato","#40e0d0":"turquoise","#ee82ee":"violet","#f5deb3":"wheat","#ffffff":"Белый","#f5f5f5":"whitesmoke","#ffff00":"Желтый","#9acd32":"Яблочно-зеленый","#e58000":"Морковный","#cc0000":"Бостонский-красный","#330000":"Коричневый","#7f8000":"Оливковый","#990000":"Сангрия","#b28000":"Темно-золотой","#4c8000":"Нежно-оливковый","#660000":"Коричнево-малиновый","#6c6000":"Оливковый","#6a55c3":"Пурпурно-синий","#67c8f6":"Ярко-голубой","#492f5c":"Глубокий-фиолетовый","#5cd1ec":"Голубой","#13ff42":"Ярко-зеленый","#1da426":"Пастельно-зеленый","#2fdbc0":"Бирюзовый","#386748":"Темно-зеленый","#59a9c1":"Темно-голубой","#146666":"Темно-бирюзовый","#c80993":"Фиолетово-красный","#fa0bf8":"Фуксия","#190132":"Темно-фиолетовый","#320262":"Темно-фиолетовый","#4b0397":"Индиго","#af0861":"Розовато-лиловый","#e10ac6":"Малиновый","#96072e":"Бургундский","#6404ca":"Пурпурно-синий","#7d05fc":"Фиолетовый","#320265":"Темный индиго","#0":"#000",orange:"Оранжевый",purple:"Фиолетовый","#4be74d":"Малахитовый","#653466":"Пурпурный","#329a33":"Зеленый","#194d1a":"Темно-зеленый","#fd02ff":"Розовый","#b11bb3":"Фиолетово-баклажанный","#e3b5e6":"Светло-розовый"}},function(e,t,s){var n=s(2),i=s(13);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};n(i,o);e.exports=i.locals||{}},function(e,t,s){},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=s(15);s(17),s(3);var i=$(".js-test-slider");i.colorSlider({isScale:!1,isChangeColor:!1}),i.colorSlider("getValue",(function(e){$(".js-custom-from").val(e.from),$(".js-custom-to").val(e.to)})),$(".js-custom-btn").click((function(){i.colorSlider("change",{color:"red",gradient:"blue",max:1e3,from:200,to:800,onlyDivisions:!0,fromTo:!0})}));var o=[{orientation:"vertical",type:"double",isColorOut:!0,onlyDivisions:!0},{gradient:"red",color:"white",max:15e3,from:5e3,to:1e4,fromTo:!0},{orientation:"vertical",gradient:"blue",color:"yellow",scalePostfix:"$",postfix:"$",min:-5e3,max:-100,step:2,from:-4e3,to:-700,changeColor:!1},{orientation:"horizontal",type:"single",isScale:!1,isLabel:!1,color:"green"}];$(".js-toxin-slider").each((function(e,t){new n.Demo($(t).colorSlider(o[e]).colorSlider("change"))}))},function(e,t,s){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Demo=void 0;var i=s(16),o=function(){function e(e){this.slider=e,this.state=e.getOptions(),this.demoTools=this.createTools(),this.init()}return e.prototype.upData=function(e){this.state=n(n({},this.state),e),this.initTools()},e.prototype.init=function(){this.createSettings(),this.initTools(),this.upData=this.upData.bind(this),this.slider.emitter.subscribe("newData",this.upData)},e.prototype.createTools=function(){var e=document.createElement("div");return e.className="demoTools",e},e.prototype.createSettings=function(){this.slider.element.after(this.demoTools),this.demoTools.insertAdjacentHTML("beforeend",i.demoTemplate)},e.prototype.initTools=function(){var e=this,t=this.state,s=t.orientation,n=t.isScale,i=t.type,o=t.isLabel,a=t.from,r=t.to,l=t.min,c=t.max,u=t.postfix,d=t.step,f=t.color,p=t.isScalePostfix,h=t.scalePostfix,m=t.minMax,b=t.fromTo,v=t.isTrackPostfix,y=t.trackPostfix,g=t.isColor,j=t.gradient,S=t.isColorOut,_=t.changeColor,x=t.isGradient,k=t.gradientDeg,T=t.onlyDivisions,P=t.isPostfix,C=t.isChangeColor,w=t.separate,M=this.demoTools.querySelector(".js-btn-scale"),O=this.demoTools.querySelector(".js-btn-view"),E=this.demoTools.querySelector(".js-btn-prefix"),q=this.demoTools.querySelector(".js-btn-color"),L=this.demoTools.querySelector(".js-menu-scale"),D=this.demoTools.querySelector(".js-menu-view"),N=this.demoTools.querySelector(".js-menu-prefix"),z=this.demoTools.querySelector(".js-color-setting"),V=this.demoTools.querySelector(".js-orientation"),R=this.demoTools.querySelector(".js-isScale"),B=this.demoTools.querySelector(".js-isColorOut"),H=this.demoTools.querySelector(".js-isLabel"),A=this.demoTools.querySelector(".js-isDouble"),$=this.demoTools.querySelector(".js-from"),F=this.demoTools.querySelector(".js-to"),G=this.demoTools.querySelector(".js-min"),I=this.demoTools.querySelector(".js-max"),X=this.demoTools.querySelector(".js-marker"),Y=this.demoTools.querySelector(".js-step"),U=this.demoTools.querySelector(".js-separate"),J=this.demoTools.querySelector(".js-color"),Q=this.demoTools.querySelector(".js-isPrefix"),K=this.demoTools.querySelector(".js-scale-prefix"),W=this.demoTools.querySelector(".js-isChangeColor"),Z=this.demoTools.querySelector(".js-minMax"),ee=this.demoTools.querySelector(".js-fromTo"),te=this.demoTools.querySelector(".js-division"),se=this.demoTools.querySelector(".js-isTrackPrefix"),ne=this.demoTools.querySelector(".js-isPrefixTool"),ie=this.demoTools.querySelector(".js-track-prefix"),oe=this.demoTools.querySelector(".js-isColor"),ae=this.demoTools.querySelector(".js-changeColor"),re=this.demoTools.querySelector(".js-gradient"),le=this.demoTools.querySelector(".js-gradient-out"),ce=this.demoTools.querySelector(".js-gradient-deg");O.onclick=function(){D.classList.toggle("js-close-menu")},M.onclick=function(){L.classList.toggle("js-close-menu")},q.onclick=function(){z.classList.toggle("js-close-menu")},E.onclick=function(){N.classList.toggle("js-close-menu")},V.onchange=function(){"horizontal"===s&&e.setState({orientation:"vertical"}),"vertical"===s&&e.setState({orientation:"horizontal"})},Q.onchange=function(){!0===p&&e.setState({isScalePostfix:!1}),!1===p&&e.setState({isScalePostfix:!0})},ne.onchange=function(){!0===P&&e.setState({isPostfix:!1}),!1===P&&e.setState({isPostfix:!0})},re.onchange=function(){!0===x&&e.setState({isGradient:!1}),!1===x&&e.setState({isGradient:!0})},W.onchange=function(){!0===C&&e.setState({isChangeColor:!1}),!1===C&&e.setState({isChangeColor:!0})},B.onchange=function(){!0===S&&e.setState({isColorOut:!1}),!1===S&&e.setState({isColorOut:!0})},R.onchange=function(){!1===n?e.setState({isScale:!0}):e.setState({isScale:!1})},H.onchange=function(){!0===o&&e.setState({isLabel:!1}),!1===o&&e.setState({isLabel:!0})},A.onchange=function(){"single"===i?e.setState({type:"double"}):e.setState({type:"single"})},Z.onchange=function(){!1===m?e.setState({minMax:!0}):e.setState({minMax:!1})},ee.onchange=function(){!1===b?e.setState({fromTo:!0}):e.setState({fromTo:!1})},te.onchange=function(){!1===T?e.setState({onlyDivisions:!0}):e.setState({onlyDivisions:!1})},se.onchange=function(){!1===v?e.setState({isTrackPostfix:!0}):e.setState({isTrackPostfix:!1})},oe.onchange=function(){!0===g?e.setState({isColor:!1}):e.setState({isColor:!0})},ae.onchange=function(){!0===_?e.setState({changeColor:!1}):e.setState({changeColor:!0})},X.value=u,X.onchange=function(){var t=X.value;e.setState({postfix:t})},$.value=String(a),$.onchange=function(){var t=Number($.value);e.setState({from:t})},F.value=String(r),F.onchange=function(){var t=Number(F.value);e.setState({to:t})},G.value=String(l),G.onchange=function(){var t=Number(G.value);e.setState({min:t})},I.value=String(c),I.onchange=function(){var t=Number(I.value);e.setState({max:t})},Y.value=String(d),Y.onchange=function(){var t=Number(Y.value);e.setState({step:t})},U.value=w,U.onchange=function(){var t=U.value;e.setState({separate:t})},J.value=String(f),J.onchange=function(){var t=J.value;e.setState({color:t})},le.value=String(j),le.onchange=function(){var t=le.value;e.setState({gradient:t})},ce.value=String(k),ce.onchange=function(){var t=Number(ce.value);e.setState({gradientDeg:t})},K.value=h,K.onchange=function(){var t=K.value;e.setState({scalePostfix:t})},ie.value=y,ie.onchange=function(){var t=ie.value;e.setState({trackPostfix:t})}},e.prototype.setState=function(e){this.state=n(n({},this.state),e),this.slider.setOptions(this.state),this.slider.upDataView()},e}();t.Demo=o},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.demoTemplate=void 0;t.demoTemplate='\n\n\n  <h4  class="js-title">Панель управления</h4>\n  <div class="js-items">\n   <label class="js-labels js-label_checkbox">V/H Вид\n   <input type="checkbox" class="js-checkbox js-inputs js-orientation" name="orientation" />\n   </label>\n   </div>\n     <div class="js-items">\n   <label class="js-labels js-label_checkbox">Range/Single\n   <input type="checkbox" class="js-checkbox js-inputs js-isDouble" name="double"/>\n   </label>\n   </div>\n   \n   <button class="js-btn js-btn-view">Настройки отображения</button>\n   <div class="js-menu js-menu-view">\n\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать/Скрыть Tooltip\n   <input type="checkbox" class="js-checkbox js-inputs js-isLabel" name="label"/>\n   </label>\n   </div>\n   \n \n   \n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать min/max\n   <input type="checkbox" class="js-checkbox js-inputs js-minMax" name="minMax"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать from/to\n   <input type="checkbox" class="js-checkbox js-inputs js-fromTo" name="fromTo"/>\n   </label>\n   </div>\n\n    <div class="js-items">\n   <label class="js-labels js-label_checkbox">Выводить цвета/значения\n   <input type="checkbox" class="js-checkbox js-inputs js-isColorOut" name="color"/>\n   </label>\n   </div>\n  \n   \n   \n   <button type="button" class="js-btn js-btn-scale">Управление шкалой</button>\n   <div class="js-menu js-menu-scale">\n       <div class="js-items">\n   <label class="js-labels js-label_checkbox">Оставить только деления\n   <input type="checkbox" class="js-checkbox js-inputs js-division" name="division"/>\n   </label>\n   </div>\n      <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать/Скрыть Шкалу\n   <input type="checkbox" class="js-checkbox js-inputs js-isScale" name="scale"/>\n   </label>\n     </div>\n   </div>\n   \n   \n   </div>\n    <div class="js-items">\n   <label class="js-labels">Max\n   <input type="number" class="js-inputs js-max" name="max"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">To\n   <input type="number" class="js-inputs js-to" name="to"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">From\n   <input type="number" class="js-inputs js-from" name="from" />\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Min\n   <input type="number" class="js-inputs js-min" name="min"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Шаг\n   <input type="number" class="js-inputs js-step" name="step"/>\n   </label>\n   </div>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Делитель\n   <input type="text" class="js-inputs js-separate" name="separate"/>\n   </label>\n   </div>\n   \n   <button class="js-btn js-btn-color" type="button">Настройки цвета</button>\n   <div class="js-menu js-color-setting">\n     <div class="js-items">\n   <label class="js-labels js-label_checkbox">Откл/Вкл изменение цвета\n   <input type="checkbox" class="js-checkbox js-inputs js-isColor" name="isColor"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Использовать только css/переменной цвет\n   <input type="checkbox" class="js-checkbox js-inputs js-isChangeColor" name="isColor"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Сменить оттенок\n   <input type="checkbox" class="js-checkbox js-inputs js-changeColor" name="isColor"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Градиент вкл/откл\n   <input type="checkbox" class="js-checkbox js-inputs js-gradient" name="isColor"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Цвет\n<input type="text" class="js-inputs js-color" name="color"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Градиент\n<input type="text" class="js-inputs js-gradient-out" name="gradient"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Угол градиента\n<input type="number" class="js-inputs js-gradient-deg" name="gradient"/>\n   </label>\n   </div>\n   </div>\n   \n   \n   <button type="button" class="js-btn js-btn-prefix">Настройки Postfix</button>\n   <div class="js-menu js-menu-prefix">\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать/Скрыть постфикс tooltip\n   <input type="checkbox" class="js-checkbox js-inputs js-isPrefixTool" name="isPrefix"/>\n   </label>\n   </div>\n      <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать/Скрыть постфикс шкалы\n   <input type="checkbox" class="js-checkbox js-inputs js-isPrefix" name="isPrefix"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels js-label_checkbox">Показать/Скрыть постфикс track\n   <input type="checkbox" class="js-checkbox js-inputs js-isTrackPrefix" name="isPrefix"/>\n   </label>\n   </div>\n   <div class="js-items">\n   <label class="js-labels">Постфикс tooltip\n   <input type="text" class="js-inputs js-marker" name="marker"/>\n   </label>\n   </div>\n      <div class="js-items">\n   <label class="js-labels">Постфикс шкалы\n<input type="text" class="js-inputs js-scale-prefix" name="js-prefix"/>\n   </label>\n   </div>\n    <div class="js-items">\n   <label class="js-labels">Постфикс track\n<input type="text" class="js-inputs js-track-prefix" name="js-prefix"/>\n   </label>\n   </div>\n   </div>\n  \n  '},function(e,t,s){var n=s(2),i=s(18);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};n(i,o);e.exports=i.locals||{}},function(e,t,s){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,